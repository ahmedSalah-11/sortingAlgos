{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Salah\\\\my-app\\\\src\\\\sortingVisualizer\\\\sorting.jsx\";\nimport React, { Component } from \"react\";\nimport \"./visual.css\";\n\nclass Visualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const arr = [];\n\n    for (let i = 0; i < 200; i++) {\n      arr.push(Math.floor(Math.random() * 700 + 5));\n    }\n\n    this.setState({\n      arr\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.arr);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const {\n      arr\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, arr.map((num, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${num}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, \"generate new array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"));\n  }\n\n}\n\nexport default Visualizer;","map":{"version":3,"sources":["C:/Users/Salah/my-app/src/sortingVisualizer/sorting.jsx"],"names":["React","Component","Visualizer","constructor","props","state","arr","componentDidMount","resetArray","i","push","Math","floor","random","setState","mergeSort","animations","getMergeSortAnimations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","SECONDARY_COLOR","PRIMARY_COLOR","setTimeout","backgroundColor","ANIMATION_SPEED_MS","newHeight","height","render","map","num","idx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./visual.css\";\r\nclass Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arr: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n  resetArray() {\r\n    const arr = [];\r\n    for (let i = 0; i < 200; i++) {\r\n      arr.push(Math.floor(Math.random() * 700 + 5));\r\n    }\r\n    this.setState({ arr });\r\n  }\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.arr);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { arr } = this.state;\r\n    return (\r\n      <div className=\"array-container\">\r\n        {arr.map((num, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ height: `${num}px` }}\r\n          ></div>\r\n        ))}\r\n        <button onClick={() => this.resetArray()}>generate new array</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Visualizer;\r\n"]},"metadata":{},"sourceType":"module"}