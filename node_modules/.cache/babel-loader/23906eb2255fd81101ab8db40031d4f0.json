{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Salah\\\\my-app\\\\src\\\\sortingVisualizer\\\\sorting.jsx\";\nimport React, { Component } from \"react\";\nimport \"./visual.css\";\nimport { getMergeSortAnimations } from \"../sortingVisualizer/algo\";\nimport { Navbar, Button, Form, InputGroup, FormControl } from \"react-bootstrap\"; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 12; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 310; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = \"turquoise\"; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = \"red\";\n\nclass Visualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const arr = [];\n\n    for (let i = 0; i < 40; i++) {\n      arr.push(Math.floor(Math.random() * 670 + 5));\n    }\n\n    this.setState({\n      arr\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.arr);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2; //every two iterations\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  changeColor() {\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    const height = 10;\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      const barOneStyle = arrayBars[i].style;\n      setTimeout(() => {\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  swap(xp, yp) {\n    let temp = xp;\n    xp = yp;\n    yp = temp;\n  }\n\n  bubleSort() {\n    const arr = document.getElementsByClassName(\"array-bar\");\n\n    for (i = 0; i < arr.length - 1; i++) {\n      // Find the minimum element in unsorted array\n      min_idx = i;\n\n      for (j = i + 1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; // Swap the found minimum element with the first element\n\n\n      swap(arr[min_idx], arr[i]);\n    }\n  }\n\n  swapHeight(barOneStyle, barTwoStyle) {\n    const temp = barOneStyle.height;\n    barOneStyle.height = barTwoStyle.height;\n    barTwoStyle.height = temp;\n  }\n\n  render() {\n    const {\n      arr\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      className: \"bg-light justify-content-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, \"sortingVisualizer\")))), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-info\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, \"generate new array\")), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-info\",\n      onClick: () => this.changeColor(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"changeArrayColor\")), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-info\",\n      onClick: () => this.bubleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, \"bubbleSort\")), /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-info\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"mergeSort\"))), arr.map((num, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        height: `${num}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Visualizer;","map":{"version":3,"sources":["C:/Users/Salah/my-app/src/sortingVisualizer/sorting.jsx"],"names":["React","Component","getMergeSortAnimations","Navbar","Button","Form","InputGroup","FormControl","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","Visualizer","constructor","props","state","arr","componentDidMount","resetArray","i","push","Math","floor","random","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","changeColor","swap","xp","yp","temp","bubleSort","min_idx","j","n","swapHeight","render","map","num","idx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./visual.css\";\r\nimport { getMergeSortAnimations } from \"../sortingVisualizer/algo\";\r\nimport { Navbar, Button, Form, InputGroup, FormControl } from \"react-bootstrap\";\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 12;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\nclass Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arr: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n  resetArray() {\r\n    const arr = [];\r\n    for (let i = 0; i < 40; i++) {\r\n      arr.push(Math.floor(Math.random() * 670 + 5));\r\n    }\r\n    this.setState({ arr });\r\n  }\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.arr);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2; //every two iterations\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  changeColor() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const height = 10;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const barOneStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n  swap(xp, yp) {\r\n    let temp = xp;\r\n    xp = yp;\r\n    yp = temp;\r\n  }\r\n\r\n  bubleSort() {\r\n    const arr = document.getElementsByClassName(\"array-bar\");\r\n\r\n    for (i = 0; i < arr.length - 1; i++) {\r\n      // Find the minimum element in unsorted array\r\n      min_idx = i;\r\n      for (j = i + 1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j;\r\n\r\n      // Swap the found minimum element with the first element\r\n      swap(arr[min_idx], arr[i]);\r\n    }\r\n  }\r\n\r\n  swapHeight(barOneStyle, barTwoStyle) {\r\n    const temp = barOneStyle.height;\r\n    barOneStyle.height = barTwoStyle.height;\r\n    barTwoStyle.height = temp;\r\n  }\r\n\r\n  render() {\r\n    const { arr } = this.state;\r\n    return (\r\n      <div className=\"array-container\">\r\n        <Navbar className=\"bg-light justify-content-between\">\r\n          <Form inline>\r\n            <InputGroup>\r\n              <Form inline>\r\n                <h1>sortingVisualizer</h1>\r\n              </Form>\r\n            </InputGroup>\r\n          </Form>\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.resetArray()}>\r\n              generate new array\r\n            </Button>\r\n          </Form>\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.changeColor()}>\r\n              changeArrayColor\r\n            </Button>\r\n          </Form>\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.bubleSort()}>\r\n              bubbleSort\r\n            </Button>\r\n          </Form>\r\n\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.mergeSort()}>\r\n              mergeSort\r\n            </Button>\r\n          </Form>\r\n        </Navbar>\r\n\r\n        {arr.map((num, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ height: `${num}px` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Visualizer;\r\n"]},"metadata":{},"sourceType":"module"}