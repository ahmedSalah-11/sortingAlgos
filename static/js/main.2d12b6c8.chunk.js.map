{"version":3,"sources":["logo.svg","sortingVisualizer/algo.js","sortingVisualizer/sorting.jsx","App.js","serviceWorker.js","components/counter.jsx","index.js"],"names":["module","exports","getMergeSortAnimations","arr","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","array","auxillaryArray","N","swap","bubbleSort","firstIndex","secondIndex","temp","PRIMARY_COLOR","SECONDARY_COLOR","Visualizer","props","state","this","resetArray","random","setState","console","log","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","xp","yp","className","Navbar","Form","inline","InputGroup","Button","onClick","changeColor","mergeSort","map","num","idx","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d12b6c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getMergeSortAnimations(arr) {\r\n  const animations = [];\r\n  if (arr.length <= 1) return arr;\r\n  const auxiliaryArray = arr.slice();\r\n  mergeSortHelper(arr, 0, arr.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\nexport function getBubbleSortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  bubbleSort(auxillaryArray, animations);\r\n\r\n  array = auxillaryArray;\r\n  return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n  const N = auxillaryArray.length;\r\n  for (let i = 0; i < N - 1; i++) {\r\n    for (let j = 0; j < N - i - 1; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n        animations.push([j, auxillaryArray[j + 1]]);\r\n        animations.push([j + 1, auxillaryArray[j]]);\r\n        swap(auxillaryArray, j, j + 1);\r\n      } else {\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./visual.css\";\r\nimport { getMergeSortAnimations } from \"../sortingVisualizer/algo\";\r\nimport { Navbar, Button, Form, InputGroup, FormControl } from \"react-bootstrap\";\r\nimport { getBubbleSortAnimations } from \"../sortingVisualizer/algo\";\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 12;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nvar PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nvar SECONDARY_COLOR = \"red\";\r\nclass Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      arr: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n  resetArray() {\r\n    const arr = [];\r\n    for (let i = 0; i < 40; i++) {\r\n      arr.push(Math.floor(Math.random() * 670 + 5));\r\n    }\r\n    this.setState({ arr });\r\n  }\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.arr);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      console.log(animations[i]);\r\n    }\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2; //every two iterations\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  changeColor() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const height = 10;\r\n    if (PRIMARY_COLOR === \"turquoise\") {\r\n      PRIMARY_COLOR = \"yellow\";\r\n      SECONDARY_COLOR = \"white\";\r\n    } else if (PRIMARY_COLOR === \"yellow\") {\r\n      PRIMARY_COLOR = \"red\";\r\n\r\n      SECONDARY_COLOR = \"green\";\r\n    } else {\r\n      PRIMARY_COLOR = \"turquoise\";\r\n      SECONDARY_COLOR = \"red\";\r\n    }\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const barOneStyle = arrayBars[i].style;\r\n\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.arr);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  swap(xp, yp) {\r\n    let temp = xp;\r\n    xp = yp;\r\n    yp = temp;\r\n  }\r\n\r\n  swapHeight(barOneStyle, barTwoStyle) {\r\n    const temp = barOneStyle.height;\r\n    barOneStyle.height = barTwoStyle.height;\r\n    barTwoStyle.height = temp;\r\n  }\r\n\r\n  render() {\r\n    const { arr } = this.state;\r\n    return (\r\n      <div className=\"array-container\">\r\n        <Navbar className=\"bg-light justify-content-between\">\r\n          <Form inline>\r\n            <InputGroup>\r\n              <Form inline>\r\n                <h1>sortingVisualizer</h1>\r\n              </Form>\r\n            </InputGroup>\r\n          </Form>\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.resetArray()}>\r\n              generate new array\r\n            </Button>\r\n          </Form>\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.changeColor()}>\r\n              changeArrayColor\r\n            </Button>\r\n          </Form>\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.bubbleSort()}>\r\n              bubbleSort\r\n            </Button>\r\n          </Form>\r\n\r\n          <Form inline>\r\n            <Button className=\"btn btn-info\" onClick={() => this.mergeSort()}>\r\n              mergeSort\r\n            </Button>\r\n          </Form>\r\n        </Navbar>\r\n\r\n        {arr.map((num, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ height: `${num}px` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Visualizer;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Visualizer from \"./sortingVisualizer/sorting\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0,\r\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\r\n  };\r\n\r\n  getTags() {\r\n    //conditional rendering\r\n    if (this.state.tags.length === 0) {\r\n      return <p>no tags</p>;\r\n    } else\r\n      return (\r\n        <ul>\r\n          {this.state.tags.map((tag) => (\r\n            <li key={tag}>{tag}</li>\r\n          ))}\r\n        </ul>\r\n      );\r\n  }\r\n  handleIncrement = () => {\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <span className={this.getClass()}>{this.countFormat()}</span>\r\n        <button onClick={this.handleIncrement} className=\"btn btn-dark\">\r\n          Increment\r\n        </button>\r\n        <div>{this.getTags()}</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getClass() {\r\n    let shape = \"badge m-2 badge-\"; //pattern to make color dynamically change according to the value of count\r\n    shape += this.state.count === 0 ? \"warning\" : \"primary\";\r\n    return shape;\r\n  }\r\n\r\n  countFormat() {\r\n    let count = this.state.count;\r\n    return count === 0 ? \"zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Counter from \"./components/counter\";\nimport Visualizer from \"./sortingVisualizer/sorting\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}